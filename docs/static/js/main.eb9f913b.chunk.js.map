{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.jsx","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","index.jsx"],"names":["AddCategory","setCategorias","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","props","categorias","ReactDOM","render","document","getElementById"],"mappings":"mNAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAmB5C,OACI,0BAAMC,SAbW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAO,IACzBR,GAAc,SAAAS,GAAI,OAAIP,GAAJ,mBAAkBO,OACpCN,EAAc,OASd,2BAAOO,KAAK,OACZC,MAAOT,EACPU,SApBkB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,Y,uBCNlBG,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEZC,EAFY,iDAEoCC,UAAUH,GAF9C,+DAICI,MAAMF,GAJP,cAIZG,EAJY,gBAKGA,EAAKC,OALR,uBAKXC,EALW,EAKXA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXxB,kBAeXM,GAfW,4CAAH,sDCCNO,EAAc,SAAC,GAA0B,IAAD,IAAxBL,IAAQE,GAAgB,EAAnBD,GAAmB,EAAhBC,OAAMV,EAAU,EAAVA,IAEvC,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAKf,EAAKgB,IAAI,KACnB,2BAAIN,MCFHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECCb,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAoBtC,OAdAC,qBAAU,WACNxB,EAAOC,GACFwB,MAAK,SAAAC,GAGFH,EAAS,CACDf,KAAMkB,EACNL,SAAS,SAK1B,CAACpB,IAEGqB,EDjBmBK,CAAa1B,GAA/Ba,EAJ6B,EAIlCN,KAAYa,EAJsB,EAItBA,QAEf,OACI,oCACA,wBAAIJ,UAAU,qCAAqChB,GAClDoB,GAAW,uBAAGJ,UAAU,oCAAb,cACZ,yBAAKA,UAAU,aAEHH,EAAOJ,KAAI,SAACJ,GAAD,OACP,kBAAC,EAAD,CACAsB,IAAKtB,EAAKM,GACVD,IAAKL,UEoBduB,EApCM,SAAAC,GAAS,MAIU3C,mBAAS,CAAC,kBAJpB,mBAInB4C,EAJmB,KAIP7C,EAJO,KAa1B,OACI,oCACI,4CACA,kBAAC,EAAD,CACAA,cAAeA,IAEf,6BAEJ,4BAEQ6C,EAAWrB,KAAI,SAACJ,GAAD,OACf,kBAAC,EAAD,CACAsB,IAAKtB,EACLL,SAAUK,GACLA,UC1BrB0B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.eb9f913b.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategorias}) => {\r\n\r\n    const [inputValue, setinputValue] = useState('');\r\n    const handleInputChange = (e)=>{\r\n        setinputValue(e.target.value);\r\n        \r\n    }\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length>2) {\r\n            setCategorias(cats =>[inputValue,...cats]);\r\n            setinputValue('');\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\"\r\n            value={inputValue}\r\n            onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategorias: PropTypes.func.isRequired\r\n};\r\n","\r\nexport const getGif = async( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=2rSFCJZApwioL0LJVzQl3K8ufw6npGug`;   \r\n    \r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    \r\n    const gifs = data.map(img =>{\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n    \r\n    return gifs;\r\n    \r\n    }","import React from 'react'\r\n\r\nexport const GifGridItem = ({img:{id,title,url}}) => {\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt=\"\"/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n ","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n// import { getGif } from '../helpers/getGifs';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n// const [images, setImages] = useState([])\r\n\r\nconst {data:images,loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n        <h3 className=\"animate__animated animate__bounce\">{category}</h3>\r\n        {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n        <div className=\"card-grid\">\r\n                {\r\n                    images.map((resp) =>(\r\n                        <GifGridItem \r\n                        key={resp.id}\r\n                        img={resp}\r\n                        ></GifGridItem>\r\n                    ))\r\n                }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n/*\r\n<GifGridItem \r\nkey={img.id}\r\n{...img}\r\n></GifGridItem>\r\ndevuelve todas las propiedades contenidos en el objeto\r\ncomo un prop individual\r\n*/\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGif } from '../helpers/getGifs.jsx';\r\n\r\n\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGif(category)\r\n            .then(imgs => {\r\n\r\n                // setTimeout(() => {\r\n                setstate({\r\n                        data: imgs,\r\n                        loading: false\r\n                    })\r\n                    // }, 3000);\r\n\r\n            });\r\n    }, [category]);\r\n\r\n    return state;\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = props => {\r\n\r\n\r\n    // const categorias = ['one punch man', 'Samurai x', 'Dragon Ball']\r\n    const [categorias, setCategorias] = useState(['one punch man']);\r\n\r\n    // const handleAdd = ()=> {\r\n    //     setCategorias([...categorias,'naruto']);\r\n\r\n    //importante, al declarar la priumera variable del set category se trae los datos del category\r\n    //     setCategorias(cats =>[...cats,'naruto']);\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory\r\n            setCategorias={setCategorias}\r\n             />\r\n            <hr/>\r\n\r\n        <ol>\r\n            {\r\n                categorias.map((resp) =>(\r\n                <GifGrid \r\n                key={resp} \r\n                category={resp}>\r\n                    {resp}\r\n                </GifGrid>\r\n                ))\r\n            }\r\n        </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n\r\n\r\n\r\n/*\r\nrafc = crear base completa\r\nrafcp = crear base completa + proptyle\r\n*/\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}